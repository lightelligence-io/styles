.Toggle {
  $knob-size: 20px;
  $track-height: 14px;
  $knob-overlap: 5px;
  $toggle-colors: (
    light: (
      disabled: (
        checked: (
          knob: get-color('primary', 'white', 0.6),
          track: get-color('primary', 'white', 0.3),
        ),
        unchecked: (
          knob: get-color('gray100'),
          track: get-color('gray200'),
        ),
      ),
      default: (
        checked: (
          knob: get-color('primary'),
          track: get-color('primary', 'white', 0.6),
        ),
        unchecked: (
          knob: get-color('light'),
          track: get-color('gray500'),
        ),
      ),
    ),
    dark: (
      disabled: (
        checked: (
          knob: get-color('primary', 'secondary', 0.4),
          track: get-color('primary', 'secondary', 0.3),
        ),
        unchecked: (
          knob: get-color('secondary', 'white', 0.6),
          track: get-color('secondary', 'white', 0.7),
        ),
      ),
      default: (
        checked: (
          knob: get-color('primary'),
          track: get-color('primary', 'white', 0.6),
        ),
        unchecked: (
          knob: get-color('light'),
          track: get-color('gray500'),
        ),
      ),
    ),
  );
  $self: &;

  display: flex;
  align-items: center;

  &--inline {
    display: inline-flex;
  }

  & + & {
    margin-top: 4px;
  }

  &--inline + &--inline {
    margin-top: 0;
  }

  input {
    display: none;
  }

  input:checked ~ &-button:after {
    left: calc(100% - #{$knob-size - $knob-overlap});
  }

  &-button,
  &-label {
    cursor: pointer;
  }

  input:disabled ~ &-button,
  input:disabled ~ &-label {
    cursor: not-allowed;
  }

  &-button {
    display: inline-block;
    position: relative;
    width: 34px;
    height: 14px;
    margin-left: $knob-overlap; // to equalize the knot overlap
    margin-right: $knob-overlap; // to equalize the knot overlap
  }

  &-button:after {
    content: '';
    box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24);
    transition: all 150ms ease;
    position: absolute;
    top: #{($track-height - $knob-size) * 0.5};
    left: #{-1 * $knob-overlap};
    height: $knob-size;
    width: $knob-size;
    border-radius: 50%;
  }

  &-button:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    border-radius: #{$track-height * 0.5};
    width: 100%;
    height: 100%;
  }

  @mixin setColors($self, $colors) {
    &:checked + #{$self}-button:after {
      background-color: map-get(map-get($colors, 'checked'), 'knob');
    }

    &:checked + #{$self}-button:before {
      background-color: map-get(map-get($colors, 'checked'), 'track');
    }

    & + #{$self}-button:after {
      background-color: map-get(map-get($colors, 'unchecked'), 'knob');
    }

    & + #{$self}-button:before {
      background-color: map-get(map-get($colors, 'unchecked'), 'track');
    }
  }

  $theme-light: map-get($toggle-colors, 'light');
  $theme-dark: map-get($toggle-colors, 'dark');

  input {
    @include setColors($self, map-get($theme-light, 'default'));
  }

  input:disabled {
    @include setColors($self, map-get($theme-light, 'disabled'));
  }

  .Theme-dark & input {
    @include setColors($self, map-get($theme-dark, 'default'));
  }

  .Theme-dark & input:disabled {
    @include setColors($self, map-get($theme-dark, 'disabled'));
  }

  input:disabled ~ &-label {
    opacity: 0.3;
  }

  &-label {
    @extend .u-content;

    margin-left: 8px;
    cursor: pointer;
    display: inline-block;
    position: relative;
    user-select: none;
  }

  .Theme-dark &-label {
    color: white;
  }

  &--reversed &-label {
    order: 1;
    margin-left: 0;
    margin-right: 8px;
  }

  &--reversed &-button {
    order: 2;
  }
}
