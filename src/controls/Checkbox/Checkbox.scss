/**
  * All colors
  *
  * Note this component can't be "brandable", since we use svgs as the
  * background for the checkbox. In this case we are forced to use
  * `get-color-value` since we want to have the final, color and not a
  * CSS variable reference
  */
$checkbox-colors: (
  light: (
    default: get-color('gray800'),
    checked: get-color('primary'),
    disabled: get-color('gray500'),
    background: (
      default: get-color-value('gray800'),
      checked: get-color-value('primary'),
      disabled: get-color-value('gray500'),
    ),
  ),
  dark: (
    default: get-color('light'),
    checked: get-color('primary'),
    disabled: get-color('secondary', 'white', 0.7),
    background: (
      default: get-color-value('light'),
      checked: get-color-value('primary'),
      disabled: get-color-value('secondary', 'white', 0.7),
    ),
  ),
);

.Checkbox {
  $checkbox-size: 18;
  $checkbox-width: $checkbox-size * 1px;
  $checkbox-height: $checkbox-size * 1px;
  $self: &;

  @mixin checkbox-background($fill, $path) {
    @include svg(
      (
        width: $checkbox-size,
        height: $checkbox-size,
      )
    ) {
      @include svg(
        'path',
        (
          fill-rule: evenodd,
          fill: $fill,
          d: $path,
        )
      );
    }
  }

  $checked-background-path: 'M16 0H2C.9 0 0 .9 0 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM7 14L2 9.192l1.4-1.346L7 11.308 14.6 4 16 5.346 7 14z';
  $default-background-path: 'M16 2v14H2V2h14zm0-2H2C.9 0 0 .9 0 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2z';
  $indeterminate-background-path: ' M2 8H16V10H2z M16 0H2C.9 0 0 .9 0 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM7';

  position: relative;
  display: flex;
  align-items: center;

  &--inline {
    display: inline-flex;
  }

  & + & {
    margin-top: 4px;
  }

  &--inline + &--inline {
    margin-top: 0;
  }

  input {
    display: none;
  }

  &-button {
    height: $checkbox-height;
    width: $checkbox-width;
    min-width: $checkbox-width;
    border-radius: 2px;
    position: relative;
    cursor: pointer;

    &:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      height: $checkbox-height;
      width: $checkbox-width;

      @include checkbox-background(
        get-color-value('primary'),
        $default-background-path
      );
    }
  }

  &-label {
    margin: 0 11px;
    cursor: pointer;
  }

  //
  // Effects
  //

  input:disabled ~ &-button,
  input:disabled ~ &-label {
    cursor: not-allowed;
  }

  //
  // Light theme colors
  //

  $theme-light-colors: map-get($checkbox-colors, light);
  $theme-light-background: map-get($theme-light-colors, background);

  &-label {
    color: map-get($theme-light-colors, default);
  }

  &-button:after {
    @include checkbox-background(
      map-get($theme-light-background, default),
      $default-background-path
    );
  }

  input:indeterminate ~ &-button:after,
  &--indeterminate ~ &-button:after {
    @include checkbox-background(
      map-get($theme-light-background, checked),
      $indeterminate-background-path
    );
  }

  input:checked ~ &-button:after {
    @include checkbox-background(
      map-get($theme-light-background, checked),
      $checked-background-path
    );
  }

  input:disabled ~ &-label {
    color: map-get($theme-light-colors, disabled);
  }

  input:disabled ~ &-button:after {
    @include checkbox-background(
      map-get($theme-light-background, disabled),
      $default-background-path
    );
  }

  input:checked:disabled ~ &-button:after {
    @include checkbox-background(
      map-get($theme-light-background, disabled),
      $checked-background-path
    );
  }

  input:disabled:indeterminate ~ &-button:after,
  &--indeterminate:disabled ~ &-button:after {
    @include checkbox-background(
      map-get($theme-light-background, disabled),
      $indeterminate-background-path
    );
  }

  //
  // Dark theme colors
  //

  $theme-dark-colors: map-get($checkbox-colors, dark);
  $theme-dark-background: map-get($theme-dark-colors, background);

  .Theme-dark & &-label {
    color: map-get($theme-dark-colors, default);
  }

  .Theme-dark & &-button:after {
    @include checkbox-background(
      map-get($theme-dark-background, default),
      $default-background-path
    );
  }

  .Theme-dark & input:checked ~ &-button:after {
    @include checkbox-background(
      map-get($theme-dark-background, checked),
      $checked-background-path
    );
  }

  .Theme-dark & input:disabled ~ &-label {
    color: map-get($theme-dark-colors, disabled);
  }

  .Theme-dark & input:disabled ~ &-button:after {
    @include checkbox-background(
      map-get($theme-dark-background, disabled),
      $default-background-path
    );
  }

  .Theme-dark & input:indeterminate ~ &-button:after,
  .Theme-dark & &--indeterminate ~ &-button:after {
    @include checkbox-background(
      map-get($theme-dark-background, checked),
      $indeterminate-background-path
    );
  }

  .Theme-dark & input:checked:disabled ~ &-button:after {
    @include checkbox-background(
      map-get($theme-dark-background, disabled),
      $checked-background-path
    );
  }

  .Theme-dark & input:disabled:indeterminate ~ &-button:after,
  .Theme-dark & &--indeterminate:disabled ~ &-button:after {
    @include checkbox-background(
      map-get($theme-dark-background, disabled),
      $indeterminate-background-path
    );
  }
}
